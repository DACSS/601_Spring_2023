{
  "hash": "e89947c3828549f589a569464475acc5",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\ndata <- read_csv(\"_data/eggs_tidy.csv\",show_col_types = FALSE)\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n  month     year large_half_dozen large_dozen extra_large_half_dozen extra_lar‚Ä¶¬π\n  <chr>    <dbl>            <dbl>       <dbl>                  <dbl>       <dbl>\n1 January   2004             126         230                    132         230 \n2 February  2004             128.        226.                   134.        230 \n3 March     2004             131         225                    137         230 \n4 April     2004             131         225                    137         234.\n5 May       2004             131         225                    137         236 \n6 June      2004             134.        231.                   137         241 \n# ‚Ä¶ with abbreviated variable name ¬π‚Äãextra_large_dozen\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\nThe dataset consists of egg prices observed on a monthly basis between 2004 and 2013. It has dimensions of 120 rows and 6 columns.The data is aggregated based on different egg carton sizes, including large_half_dozen, large_dozen, extra_large_half_dozen, and extra_large_dozen. According to the analysis, the average price for large_half_dozen egg cartons is \\$155.2, while the average price for large_dozen egg cartons is \\$254.2. Furthermore, the average price for extra_large_half_dozen egg cartons is \\$164.2, and the average price for extra_large_dozen egg cartons is \\$266.8. These figures provide insights into the average prices associated with each specific egg carton size categor. However, the current format of the dataset violates the \"tidy\" data principle, which requires each observation to be represented in a separate row. To rectify this, we can pivot the columns representing different sizes and quantities of eggs (e.g., large_half_dozen, large_dozen, extra_large_half_dozen, extra_large_dozen). By doing so, we will create two new columns - \"type\" with values \"large\" and \"extra_large\", and \"quantity\" with values \"dozen\" and \"half_dozen\". This transformation will convert the dataset into a tidy format, adhering to the principles of tidy data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    month                year      large_half_dozen  large_dozen   \n Length:120         Min.   :2004   Min.   :126.0    Min.   :225.0  \n Class :character   1st Qu.:2006   1st Qu.:129.4    1st Qu.:233.5  \n Mode  :character   Median :2008   Median :174.5    Median :267.5  \n                    Mean   :2008   Mean   :155.2    Mean   :254.2  \n                    3rd Qu.:2011   3rd Qu.:174.5    3rd Qu.:268.0  \n                    Max.   :2013   Max.   :178.0    Max.   :277.5  \n extra_large_half_dozen extra_large_dozen\n Min.   :132.0          Min.   :230.0    \n 1st Qu.:135.8          1st Qu.:241.5    \n Median :185.5          Median :285.5    \n Mean   :164.2          Mean   :266.8    \n 3rd Qu.:185.5          3rd Qu.:285.5    \n Max.   :188.1          Max.   :290.0    \n```\n:::\n\n```{.r .cell-code}\ndim(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n:::\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA   1669.     1388.\n2 USA      1990 NAFTA     17.6    1010.\n3 France   1980 EU      1538.     1464.\n4 Mexico   1990 NAFTA   1389.     2306.\n5 USA      1980 NAFTA    733.     1402.\n6 France   1990 EU      1187.      538.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n\n```{.r .cell-code}\ncat(paste(\"The number of rows in the dataset are\", nrow(data)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe number of rows in the dataset are 120\n```\n:::\n:::\n\n\nAny additional comments?\n\nHere, we are pivoting four columns, and the number of rows in the original dataset (data) is 120. After pivoting, the resulting number of rows would be equal to \\`nrows(df) \\* 4 = 120 \\* 4 = 480\\`. Additionally, the number of columns after pivoting would be 3 + 2 = 5. Therefore, the final dimension of the dataset would be 480 rows by 5 columns.\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing             1669. \n 2 Mexico   1980 NAFTA incoming             1388. \n 3 USA      1990 NAFTA outgoing               17.6\n 4 USA      1990 NAFTA incoming             1010. \n 5 France   1980 EU    outgoing             1538. \n 6 France   1980 EU    incoming             1464. \n 7 Mexico   1990 NAFTA outgoing             1389. \n 8 Mexico   1990 NAFTA incoming             2306. \n 9 USA      1980 NAFTA outgoing              733. \n10 USA      1980 NAFTA incoming             1402. \n11 France   1990 EU    outgoing             1187. \n12 France   1990 EU    incoming              538. \n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEggsPivot <- data %>% \n  pivot_longer(\n    cols = -c(month, year),\n    names_to = c(\"size\", \"quantity\"),\n    names_pattern = \"(.+)_(.+)\",\n    values_to = \"price\"\n  )\n\nEggsPivot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 5\n   month     year size             quantity price\n   <chr>    <dbl> <chr>            <chr>    <dbl>\n 1 January   2004 large_half       dozen     126 \n 2 January   2004 large            dozen     230 \n 3 January   2004 extra_large_half dozen     132 \n 4 January   2004 extra_large      dozen     230 \n 5 February  2004 large_half       dozen     128.\n 6 February  2004 large            dozen     226.\n 7 February  2004 extra_large_half dozen     134.\n 8 February  2004 extra_large      dozen     230 \n 9 March     2004 large_half       dozen     131 \n10 March     2004 large            dozen     225 \n# ‚Ä¶ with 470 more rows\n```\n:::\n:::\n\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}