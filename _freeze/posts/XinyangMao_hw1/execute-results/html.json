{
  "hash": "47c25cf4285f3d1a8a28d66f7010df1d",
  "result": {
    "markdown": "---\ntitle: \"Challenge1\"\nauthor: \"Xinyang Mao\"\ndesription: \"Reading in data and describing it\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - hw1\n  - challenge1\n  - my name\n  - dataset\n  - ggplot2\n---\n\n## Import package\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n\n## Read dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"_data/railroad_2012_clean_county.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2930 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): state, county\ndbl (1): total_employees\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n## Shows the first 6 rows of the data frame\nThis function defaults to printing the first 6 row.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  state county               total_employees\n  <chr> <chr>                          <dbl>\n1 AE    APO                                2\n2 AK    ANCHORAGE                          7\n3 AK    FAIRBANKS NORTH STAR               2\n4 AK    JUNEAU                             3\n5 AK    MATANUSKA-SUSITNA                  2\n6 AK    SITKA                              1\n```\n:::\n:::\n\n## Shows the dimensions of the data frame by row and column\nWe can see there are 2930 rows and 3 colums in this dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2930    3\n```\n:::\n:::\n\n## Shows the structure of the data frame\nThe structure of the data set also tells us the number of rowsand columns, but it provides even more information. It tells us the column names, the class of each column (what kind of data is stored in it), and the first few observations of each variable.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [2,930 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ state          : chr [1:2930] \"AE\" \"AK\" \"AK\" \"AK\" ...\n $ county         : chr [1:2930] \"APO\" \"ANCHORAGE\" \"FAIRBANKS NORTH STAR\" \"JUNEAU\" ...\n $ total_employees: num [1:2930] 2 7 2 3 2 1 88 102 143 1 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   state = col_character(),\n  ..   county = col_character(),\n  ..   total_employees = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n## Shows the name of each column in the data frame\nThis function prints a vector of the column names.\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"state\"           \"county\"          \"total_employees\"\n```\n:::\n:::\n\n## Provides summary statistics on the columns of the data frame\nThe summary provides descriptive statistics including the min, max, mean, median, and quartiles of each column. For example, we can see in this data set that the average number of total employees is 87.18.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    state              county          total_employees  \n Length:2930        Length:2930        Min.   :   1.00  \n Class :character   Class :character   1st Qu.:   7.00  \n Mode  :character   Mode  :character   Median :  21.00  \n                                       Mean   :  87.18  \n                                       3rd Qu.:  65.00  \n                                       Max.   :8207.00  \n```\n:::\n:::\n\n## Shows a spreadsheet-like display of the entire data frame\nThis window provides vertical and horizontal scroll bars to browse the entire data set. It looks exactly like an Excel spreadsheet.\n\n::: {.cell}\n\n```{.r .cell-code}\nView(data)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}