---
title: "Eli B | Challenge 1"
author: "Eli Boahen"
desription: "Reading in data and creating a post"
date: "03/10/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_1
  - railroads
  - faostat
  - wildbirds
  - EliBoahen
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
#There will be friendly notes along the way
```

## Challenge Overview

Today's challenge is to

1)  read in a dataset, and

2)  describe the dataset using both words and any supporting information (e.g., tables, etc)

## Read in the Data

Read in one (or more) of the following data sets, using the correct R package and command.

-   railroad_2012_clean_county.csv ⭐
-   birds.csv ⭐⭐
-   FAOstat\*.csv ⭐⭐
-   wild_bird_data.xlsx ⭐⭐⭐
-   StateCounty2012.xls ⭐⭐⭐⭐

Find the `_data` folder, located inside the `posts` folder. Then you can read in the data, using either one of the `readr` standard tidy read commands, or a specialized package such as `readxl`.

```{r}
library(readr)

df<-read_csv("_data/railroad_2012_clean_county.csv")
head(df)#
#read. reads in files
#readr:: allows you to see all the fictions in the package. This can be used for any package like tdyverse and stuff )
#tidyverse is a package that allows you to manipulate and tansform data. It tidies it up! You have
```

Add any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.

## Describe the data

Using a combination of words and results of R commands, can you provide a high level description of the data? Describe as efficiently as possible where/how the data was (likely) gathered, indicate the cases and variables (both the interpretation and any details you deem useful to the reader to fully understand your chosen data).



```{r}
names(df) #we learn that our dataset has 3 columns
summary(df) # give you summary statistics
unique(df$state) # the $ makes a vector from the dataframe (Vector:is essentially extracting a list) which helps with things like typeof which may need specific types
select(df, state) #commas are okay, commas with spaces will not break your code like before
df$state #element number on the left (a shorthand to know where you are amongst the entries of the vector)
#with line 73, we see it maintained it's tibble (which is tidyverse format of a dataframe )
#without the select we can index
df$state[5] #and you'll get the 5th element!
df[, "state"=="AK"] #we put a comma before to show all the rows that

```






```{r}
#| label: summary
#? brings up help. To get the information. type in the thing then hit ctrl + enter
?filter
# ctrl + shit + enter runs 1 chunk of code
# ctrl + enter runs 1 specif line
# crtl +alt + i inserts a code chunk into your code

```


```{r}
#like this!
```


